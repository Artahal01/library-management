openapi: 3.0.3
info:
  title: Library API
  version: 1.0.0
  description: STD22060
servers:
  - url: https://library.com
paths:
  /books:
    get:
      summary: Get all books
      description: The returned books are ordered by updated datetime.
      operationId: getBooks
      parameters:
        - $ref: '#/components/parameters/queryPagination'
        - $ref: '#/components/parameters/queryPageSize'
        - $ref: '#/components/parameters/pathPagination'
        - $ref: '#/components/parameters/pathPageSize'
      responses:
        200:
          description: The list of filtered books
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Book'
    put:
      summary: Create or update a list of books
      operationId: crupdateBooks
      requestBody:
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/CrupdateBook'
      responses:
        200:
          description: The list of created or updated books
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Book'
  /authors:
    get:  
      summary: Get all authors
      description: Get a list of all authors or filter by name.
      operationId: getAuthors
      parameters:
        - $ref: '#/components/parameters/queryPagination'
        - $ref: '#/components/parameters/queryPageSize'
        - $ref: '#/components/parameters/pathPagination'
        - $ref: '#/components/parameters/pathPageSize'
      responses:
        200:
          description: The list of authors
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Author'
    put:
      summary: Create or update an author
      operationId: crupdateAuthor
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Author'
      responses:
        200:
          description: The created or updated author
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Author'
    delete:  
      summary: Delete an author
      description: Delete an author by ID.
      operationId: deleteAuthor
      parameters:
        - in: path
          name: authorId
          description: ID of the author to delete
          required: true
          schema:
            type: integer
      responses:
        204:
          description: Author successfully deleted
components:
  schemas:
    Book:
      type: object
      properties:
        id:
          type: string
        bookName:
          type: string
        author:
          $ref: '#/components/schemas/Author'  
        pageNumbers:
          type: integer
        topic:
          type: string
          enum:
            - ROMANCE
            - COMEDY
            - OTHER
        releaseDate:
          type: string
          format: date
    Author:  
      type: object
      properties:
        id:
          type: integer
        name:
          type: string
        sex:
          type: string
          enum:
            - M
            - F
    CrupdateBook:
      allOf:
        - $ref: '#/components/schemas/Book'
        - type: object
          properties:
            ID:
              type: integer
            bookName:
              type: string
            pageNumbers:
              type: integer
            topic:
              type: string
              enum:
                - ROMANCE
                - COMEDY
                - OTHER
            releaseDate:
              type: string
              format: date
  parameters:
    queryPagination:
      name: page
      in: query
      description: Page number for pagination (default is 1)
      required: false
      schema:
        type: integer
        default: 1
    queryPageSize:
      name: pageSize
      in: query
      description: Number of items per page (default is 50)
      required: false
      schema:
        type: integer
        default: 50
    pathPagination:
      name: page
      in: path
      description: Page number for pagination (default is 1)
      required: true
      schema:
        type: integer
        default: 1
    pathPageSize:
      name: pageSize
      in: path
      description: Number of items per page (default is 50)
      required: true
      schema:
        type: integer
        default: 50